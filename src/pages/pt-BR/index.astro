---
import patternRings from '@assets/pattern-rings.svg';
import { Contact } from '@components/Contact';
import Container from '@components/Container';
import Divider from '@components/Divider';
import { Experience } from '@components/Experience';
import Footer from '@components/Footer/index.astro';
import Header from '@components/Header/index.astro';
import { Hero } from '@components/Hero';
import Jobs from '@components/Jobs';
import Link from '@components/Link';
import { Project } from '@components/Project';
import SectionTitle from '@components/SectionTitle';
import { experienceItems } from '@data/experience';
import { jobs } from '@data/jobs';
import { projects } from '@data/projects';
import Layout from '@layouts/Layout.astro';
import { motion } from 'framer-motion';
import { changeLanguage, t } from 'i18next';
// @ts-expect-error PandaCSS typing error
import { css } from '/styled-system/css';

changeLanguage('pt-BR');

const patternRingsStyle = css({
	position: 'relative',
	display: {
		base: 'block',
	},
	gridArea: '1/-1',
	maxWidth: 'unset',
	right: '-35%',
	zIndex: '-1',
});
---

<Layout>
  <Fragment>
    <Header />
    <main>
      <Hero.Root>
        <Hero.Title name="Vinicius Costa" />
        <Hero.Text client:load>
          {t('hero:text')}
        </Hero.Text>

        <Link url="#contact" client:load delay={1}>{t('common:contactMe')}</Link
        >
      </Hero.Root>

      <Container>
        <Divider delay={1.5} client:load />
      </Container>

      <Experience.Root>
        <Container>
          <Experience.Grid>
            {
              experienceItems.map((experience, i) => (
                <Experience.Item delay={0.15 * i} client:visible>
                  <Experience.Name name={experience.name} />
                  <Experience.Text
                    yearsOfExperience={experience.yearsOfExperience}
                  />
                </Experience.Item>
              ))
            }
          </Experience.Grid>
        </Container>
      </Experience.Root>

      <div
        class={css({
          position: 'relative',
          overflowX: 'hidden',
          display: {
            base: 'grid',
          },
          alignItems: 'center',
          my: {
            base: '-6rem',
            md: '-6.5rem -2.5rem',
            lg: '-6.5rem 0',
          },

          '& hr': {
            display: {
              md: 'none',
            },
          },

          '& img': {
            right: {
              base: 'inherit',
              md: '-75%',
            },
          },
        })}
      >
        <motion.img
          src={patternRings.src}
          alt=""
          className={patternRingsStyle}
          initial={{ opacity: 0, x: 32 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ type: 'spring' }}
          client:visible
        />
        <div class={css({ gridArea: '1/-1' })}>
          <Container>
            <Divider client:load />
          </Container>
        </div>
      </div>

      <Jobs jobs={jobs} language={Astro.currentLocale} client:visible />

      <Project.Root>
        <Container>
          <div
            class={css({
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBlockEnd: { base: '2.5rem', lg: '5rem' },
            })}
          >
            <SectionTitle text={t('projects:title')} client:visible />
            <Link url="#contact" hasAnimation client:visible
              >{t('common:contactMe')}</Link
            >
          </div>

          <Project.Grid>
            {
              projects.map((project, i) => (
                <Project.Item delay={0.3 * i} client:visible>
                  <Project.Img
                    imagePath={project.imgPath}
                    altText={project.alt}
                  />

                  <Project.Name name={project.name} />
                  <Project.Stack>
                    {project.stack.map((s: string) => (
                      <span>{s}</span>
                    ))}
                  </Project.Stack>

                  <Project.Actions>
                    <Link
                      url={project.live}
                      target="_blank"
                      hasAnimation
                      client:visible
                    >
                      {t('projects:viewProject')}
                    </Link>
                    {project.code && (
                      <Link
                        url={project.code}
                        target="_blank"
                        hasAnimation
                        client:visible
                      >
                        {t('projects:viewCode')}
                      </Link>
                    )}
                  </Project.Actions>
                </Project.Item>
              ))
            }
          </Project.Grid>
        </Container>
      </Project.Root>

      <Contact.Root>
        <Container>
          <Contact.Grid>
            <div>
              <SectionTitle
                hasMarginBottom
                align="center"
                text={t('contact:title')}
                client:visible
              />
              <Contact.Text client:visible>
                {t('contact:description')}
              </Contact.Text>
            </div>

            <Contact.Form client:visible />
          </Contact.Grid>
        </Container>
      </Contact.Root>

      <section class={css({ backgroundColor: 'black.700' })}>
        <Container>
          <Divider client:load />
        </Container>
      </section>
    </main>

    <Footer />
  </Fragment>
</Layout>
